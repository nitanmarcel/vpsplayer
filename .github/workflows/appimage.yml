name: Build app image
on:
  push:

jobs:
  build:
    runs-on: ubuntu-latest
    container: 
      image: ubuntu:18.04
      options: --security-opt apparmor:unconfined --cap-add SYS_ADMIN --device /dev/fuse
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup qt 5.15
        run: |
          apt update -qq
          apt install -y patchelf software-properties-common
          add-apt-repository ppa:beineri/opt-qt-5.15.2-bionic -y
          apt update -qq
      - name: Installing required packages
        run: |
          apt install -y qtchooser qt515base qt515declarative qt515multimedia qt515svg qt515x11extras qt515wayland build-essential python3-pip ninja-build wget pkg-config libsamplerate0-dev libsndfile1-dev libfftw3-dev ladspa-sdk lv2-dev vamp-plugin-sdk libboost-test-dev meson ninja-build libssl-dev libgl1-mesa-dev fuse libfuse2 ibgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-bad1.0-dev gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-doc gstreamer1.0-tools gstreamer1.0-x gstreamer1.0-alsa gstreamer1.0-gl gstreamer1.0-gtk3 gstreamer1.0-qt5 gstreamer1.0-pulseaudio git
        env:
          DEBIAN_FRONTEND: noninteractive
          TZ: Etc/UTC
      - name: Install meson
        run: |
          pip3 install --user meson
          echo "${HOME}/.local/bin" >> $GITHUB_PATH
      - name: Compile and install cmake-3.24.1
        run: |
          mkdir cmake && cd cmake
          wget https://github.com/Kitware/CMake/releases/download/v3.24.1/cmake-3.24.1.tar.gz
          tar -xf cmake-3.24.1.tar.gz
          cd cmake-3.24.1
          ./bootstrap
          make -j$(nproc --all)
          make install
      - name: Compile and install Rubberband
        run: |
          mkdir rubberband && cd rubberband
          wget https://breakfastquay.com/files/releases/rubberband-3.0.0.tar.bz2
          tar -xf rubberband-3.0.0.tar.bz2
          cd rubberband-3.0.0
          meson build
          ninja -C build
          ninja -C build install
      - name: Compile vpsplayer
        run: |
          rm -rf cmake/ rubberband/
          export QTDIR="/opt/qt515"
          export LD_LIBRARY_PATH="/opt/qt515/lib/x86_64-linux-gnu:/opt/qt515/lib:$LD_LIBRARY_PATH"
          export PATH="/opt/qt515/bin:$PATH"
          export PKG_CONFIG_PATH="/opt/qt515/lib/pkgconfig:$PKG_CONFIG_PATH"

          [ -e /usr/lib/x86_64-linux-gnu/qtchooser/qt515.conf ] && rm /usr/lib/x86_64-linux-gnu/qtchooser/qt515.conf

          echo "/opt/qt515/bin" >> /usr/lib/x86_64-linux-gnu/qtchooser/default.conf
          echo "/opt/qt515/lib/x86_64-linux-gnu" >> /usr/lib/x86_64-linux-gnu/qtchooser/default.conf

          qmake QMAKE_CXXFLAGS_RELEASE="-O2 -march=native -fvisibility-inlines-hidden -pipe -fno-plt -g0" vpsplayer.pro
          make -j$(nproc --all)
          strip --strip-unneeded vpsplayer
          make install INSTALL_ROOT="$(pwd)/AppDir"
      - name: Download tools
        run: |
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
          wget https://raw.githubusercontent.com/linuxdeploy/linuxdeploy-plugin-gstreamer/master/linuxdeploy-plugin-gstreamer.sh
          wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod a+x linuxdeploy-x86_64.AppImage
          chmod a+x linuxdeploy-plugin-qt-x86_64.AppImage
          chmod a+x linuxdeploy-plugin-gstreamer.sh
          chmod a+x appimagetool-x86_64.AppImage

      - name: Generate AppDir
        run: |

          ./linuxdeploy-x86_64.AppImage --appdir AppDir


          export QTDIR="/opt/qt515"
          export LD_LIBRARY_PATH="/opt/qt515/lib/x86_64-linux-gnu:/opt/qt515/lib:$LD_LIBRARY_PATH"
          export PATH="/opt/qt515/bin:$PATH"
          export PKG_CONFIG_PATH="/opt/qt515/lib/pkgconfig:$PKG_CONFIG_PATH"

          [ -e /usr/lib/x86_64-linux-gnu/qtchooser/qt515.conf ] && rm /usr/lib/x86_64-linux-gnu/qtchooser/qt515.conf
          
          echo "/opt/qt515/bin" >> /usr/lib/x86_64-linux-gnu/qtchooser/default.conf
          echo "/opt/qt515/lib/x86_64-linux-gnu" >> /usr/lib/x86_64-linux-gnu/qtchooser/default.conf

          ./linuxdeploy-x86_64.AppImage --plugin qt --appdir AppDir --desktop-file AppDir/usr/share/applications/com.github.fcrollet.vpsplayer.desktop
          ./linuxdeploy-x86_64.AppImage --plugin gstreamer --appdir AppDir --desktop-file AppDir/usr/share/applications/com.github.fcrollet.vpsplayer.desktop
          
          # Remove uneeded libraries
          rm AppDir/usr/lib/libgobject-2.0.so.0
          rm AppDir/usr/lib/libgmodule-2.0.so.0
          rm AppDir/usr/lib/libglib-2.0.so.0
          rm AppDir/usr/lib/libgio-2.0.so.0
          
          ./appimagetool-x86_64.AppImage AppDir -n
      - name: Create AppImage
        run: |
          ./linuxdeploy-x86_64.AppImage -p qt --appdir AppDir
      - name: Get short SHA
        uses: benjlevesque/short-sha@v1.2
        with:
          length: 6
      - name: Delete old alpha release
        uses: dev-drprasad/delete-tag-and-release@v0.1.3
        with:
          delete_release: true
          tag_name: nightly
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Tag snapshot
        uses: tvdias/github-tagger@v0.0.1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          tag: alpha
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          files: VPS*.AppImage
          tag_name: alpha
          draft: false
          prerelease: true
